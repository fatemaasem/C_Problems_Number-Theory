#include <iostream>

#include <queue>
#include <stack>
#include <algorithm>
#include<cstdio>
#include<vector>
#include<set>
#include<map>
#include<string>
#define ll long long 
using namespace std;
////////////////////////////
const int MDD = 1e9 + 7;
const int N = 2e5 + 7;
int fact[N], inv[N];
int add(int a, int b) {
	return( a + b) % MDD;
}
int mul(int a, int b) {
	return 1ll * a * b % MDD;
}
//////////////
int power(int b, int p) {
	if (!p)
		return 1;
	int  r = power(b, p / 2);
	r = mul(r, r);
	if (p % 2 == 1)
		r = mul(r, b);
	return r;
}
int gcd(int a, int b) {
	if (b == 0)
		return a;
	else
		return gcd(b, a % b);

}
bool prim(int x) {
	bool v = false;
	for (int i = 2; i < x; i++) {
		if (x % i == 0) {
			v = true;
			return false;
		}
	}
	if (v == false)
		return true;
}

void pre() {
	fact[0] = inv[0] = 1;
	for (int i = 1; i < N; i++) {
		fact[i] = mul(i, fact[i - 1]);
		inv[i] = power(fact[i], MDD - 2);
	}
}
int nCr(int n, int r) {
	return mul(fact[n], mul(inv[r], inv[n - r]));
}
int main() {
	pre();
	int t;
	cin >> t;
	while(t--){
	multimap<int, int>m;
	int n, mm, k;
	cin >> n;
	cin >> mm >> k;
	vector<int>v(n);

	for (int i = 0; i < n; i++)
		cin >> v[i];
	sort(v.begin(), v.end());

	for (int i = 1; i <= n; i++) {

		m.insert({ v[i - 1],i });

	}

	//cout << "\n";
	//for (auto io : m)
	//	cout << io.first << " " << io.second << "\n";
	int sum = 0;
	for (auto io : m) {
		 if (m.upper_bound((io.first) + k) != m.end()) {
			int num = m.upper_bound((io.first) + k)->second - io.second;
			if (num < mm)
				continue;
			//cout <<num<< "\n";
			sum = add(sum, nCr(num-1 , mm - 1));
			//cout << num << "\n";
		}
		else if (v[n-1]<=io.first+k)
		{
			if (io.second + mm - 1 <= n) {
				int num = (n-io.second)+1;
				sum = add(sum, nCr(num - 1, mm - 1));
			//	cout << sum << "\n";
			}
			else
				break;
		}




	}
	cout << sum << "\n";
}
}
	
